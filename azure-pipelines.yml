name:  $[format('{0:yyyyMMdd\-HHmmss}', pipeline.startTime)]

variables:
  CURRENT_DATE: $[format('{0:yyyyMMdd\-HHmmss}', pipeline.startTime)]
  REPOSITORY_NAME: $(Build.Repository.Name)
  COMMIT_TAG: $(git log --format=%h -1)

jobs:
  - job: latest_build
    displayName: "Build with latest devkitARM"
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: |
        curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman.deb -o pacman.deb
        sudo apt update
        # Install haveged to ensure enough entropy
        sudo apt install p7zip-full haveged 
        sudo dpkg -i pacman.deb

        sudo dkp-pacman -Sy
        sudo dkp-pacman -S nds-dev --noconfirm
      displayName: 'Installing devkitPro and 7zip'

    - script: |
        rm -r 7zfile/_nds/TWiLightMenu/*
      displayName: "Cleaning themes from build directory"

    - script: |
        export DEVKITPRO="/opt/devkitpro"
        export DEVKITARM="/opt/devkitpro/devkitARM"

        sudo cp libmm7.a /opt/devkitpro/libnds/lib/libmm7.a

        make package

        cd booter/
        chmod +x make_cia
        ./make_cia --srl="booter.nds"
        mkdir -p "../7zfile/3DS - CFW users/"
        cp "booter.cia" "../7zfile/3DS - CFW users/TWiLight Menu.cia"

        cd ../rungame/
        chmod +x make_cia
        ./make_cia --srl="rungame.nds"
        cp "rungame.cia" "../7zfile/3DS - CFW users/TWiLight Menu - Game booter.cia"
      displayName: 'Build TWiLight Menu++ with latest devkitARM'
    - script: |
        mv 7zfile/ TWiLightMenu/
        7z a TWiLightMenu.7z TWiLightMenu/
        cp TWiLightMenu.7z $(Build.ArtifactStagingDirectory)/TWiLightMenu.7z
      displayName: 'Pack 7z Package'
    - task: PublishBuildArtifacts@1
      displayName: "Publish build to Azure"
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'build-devkitARM-latest'

  - job: docker_build
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build with Docker using forked libnds and devkitARM r50"
    steps:
      - script: |
          sudo apt update
          sudo apt install p7zip-full
        displayName: "Install 7zip"
      - script: |
          docker build -t twilightmenu --label twilightmenu ./docker
          docker ps -a
        displayName: "Build Docker image"
      - script: |
          rm -r 7zfile/_nds/TWiLightMenu/*
        displayName: "Cleaning themes from build directory"
      - script: |
          docker run --rm -i -v "$(Build.SourcesDirectory):/data" twilightmenu make package
        displayName: "Build TWiLightMenu++ with Docker using forked libnds and devkitARM r50"
      - script: |
          mv 7zfile/ TWiLightMenu/
          7z a TWiLightMenu.7z TWiLightMenu/
          cp TWiLightMenu.7z $(Build.ArtifactStagingDirectory)/TWiLightMenu_docker.7z
        displayName: 'Pack 7z Package'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'build-devkitARM-Docker'

    # Only run this for non-PR jobs.
  - job: publish_build_twlbot
    displayName: "Publish build to TWLBot"
    dependsOn: 
      - latest_build
      - docker_build
    condition: and(succeeded('latest_build'), succeeded('docker_build'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'build-devkitARM-latest'
        displayName: "Retrieving artifacts from devkitARM Build"
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'build-devkitARM-Docker'
        displayName: "Retrieving artifacts from Docker build"
      - script: 
          ls -a $(Build.ArtifactStagingDirectory)
      - script: |
          echo '##vso[task.setvariable variable=COMMIT_TAG]'$(git log --format=%h -1)
          echo '##vso[task.setvariable variable=COMMIT_MESSAGE]'$(git log --pretty=format:"%an - %s" -1)

          git config --global user.email "flamekat54@aol.com"
          git config --global user.name "TWLBot"
          git clone https://$GITHUB_TOKEN@github.com/TWLBot/Builds.git
          cd Builds/
          cp $(Build.ArtifactStagingDirectory)/build-devkitARM-latest/TWiLightMenu.7z TWiLightMenu.7z
          cp $(Build.ArtifactStagingDirectory)/build-devkitARM-Docker/TWiLightMenu_docker.7z TWiLightMenu_docker.7z
          git stage .
          git commit -m "TWiLightMenu | $(COMMIT_TAG)"
          git push origin master
          git tag v$CURRENT_DATE

          echo '##vso[task.setvariable variable=TWLBOT_COMMIT]'$(git log -1 --format="%H")
        displayName: "Commit and push to TWLBot/Builds"

      - task: GitHubRelease@0
        displayName: "Release to TWLBot/Builds"
        inputs:
          gitHubConnection: TWLBot
          repositoryName: TWLBot/Builds
          action: create
          target: $(TWLBOT_COMMIT)
          tagSource: 'manual'
          tag: v$(CURRENT_DATE)
          title: TWiLightMenu | $(COMMIT_TAG)
          releaseNotesSource: input
          releaseNotes: $(COMMIT_MESSAGE)
          assets: '$(Build.ArtifactStagingDirectory)/**/*.7z'
          isPreRelease: true
          addChangeLog: false

  - job: send_webhook_success
    dependsOn: publish_build_twlbot
    displayName: Send Discord Success Webhook
    condition: and(succeeded('publish_build_twlbot'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    steps: 
      - script: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-azure.sh
          chmod +x send.sh
          ./send.sh success $WEBHOOK_URL
        displayName: "Send success webhook"
  - job: send_webhook_failure
    dependsOn: publish_build_twlbot
    displayName: Send Discord Failure Webhook
    condition: and(or(failed('publish_build_twlbot'), failed('latest_build'), failed('docker_build')), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    steps: 
      - script: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-azure.sh
          chmod +x send.sh
          ./send.sh failure $WEBHOOK_URL
        displayName: "Send failure webhook"
